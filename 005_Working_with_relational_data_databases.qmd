---
title: "Lesson 5 Working with relational data & databases"

---

```{r}
#| echo: false
#| message: false
library(palmerpenguins)
library(tibble)
library(tidyr)
library(dplyr)
library(ggplot2)
library(knitr)
library(here)
library(DBI)
```

<div class="question">
Exercise 5.1

What is the first variable in the penguins_long dataframe printed above?
</div class="question">

`r colnames(penguins[1])`

<div class="question">
Exercise 5.2

What happened? Can you think of a way we could have prevented this error a couple of steps before? Try it!
</div class="question">

Adding an index per measured penguin will solve the issue
```{r}
#| label: tbl-penguins_index
#| tbl-cap: "penguin data"
penguins_index <- rowid_to_column(penguins, "index")
kable(head(penguins_index))

penguins_tidy <-
  penguins_index %>%
  pivot_longer(cols = c(bill_length_mm, 
               bill_depth_mm, 
               flipper_length_mm, 
               body_mass_g),
               names_to = "variable",
               values_to = "value")
```

<div class="question">
Exercise 5.3

Read the output. Why does this give an empty tibble? Is that a good thing?
</div class="question">
```{r}
#| eval: false  
rabbitdata %>%
  count(rabbit_id) %>%
  filter(n>1)
```
Code pipes rabbitdata to count rabbit_ids that appear more than one time. This means that each row is a unique rabbit with only date and ear length. This doesn't have to be good or bad unless there is duplicate data. In the case of multiple variables per rabbit one can just filter based on the desired variable. 

<div class="question">
Exercise 5.4

Let’s refresh your memory. Take the penguins dataset.

As we all know, Adelie penguins love peanut butter, Chinstrap penguins prefer cheese and Gentoo penguins do anything for chocolate.

Here is a table describing food preference:

```{r}
food_preference <-
  tibble(
    penguin_species = c("Adelie", "Chinstrap", "Gentoo"),
    favorite_food = c("peanut butter", "cheese", "chocolate")
  )
```
Join this table with the penguins table in such a way that favorite_food becomes a variable within penguins. What is/are the key variables?
</div class="question">
```{r}
#| label: fig-penguin_food
#| fig-cap: Penguins' favorite foods by species
colnames(food_preference)[1] <- paste("species") # Change penguin_species to "species" to allow left_join by `species`
food_penguins <- penguins %>%
  left_join(food_preference)

food_penguins %>%
  ggplot(aes(x = favorite_food, fill = species)) +
  geom_bar(width = 0.3) +
  theme_minimal() +
  labs(title = "Penguins favorite food by species")
```

Exercise 5.5

Now make a new tibble containing only the information on penguin species, sex and bill length measured in 2009 using filter and select.
```{r}
#| label: tbl-fil2009_food_penguins
#| tbl-cap: "Bill length of penguin species in 2009"
#| layout-ncol: 3
fil2009_food_penguins <- 
  food_penguins %>% 
  filter(year==2009) %>%
  select(species, sex, bill_length_mm)

kable(head(fil2009_food_penguins))
```
<br>
<div class="question">
Exercise 5.6

To which table is the foreign key in this table linking?
</div class="question">

"Artist"

<div class="question">
Exercise 5.7

Which artist has ArtistId 168?
</div class="question">
Youssou N'Dour

<div class="question">
Exercise 5.8

Alter the code a bit to see the Albums in the database by the artist with ArtistId 90.
</div class="question">
```{sql}
#| eval: false
SELECT Title, AlbumId 
FROM Album 
WHERE ArtistId = 90
```

<div class="question">
Exercise 5.9

Open a new SQL console for the DBeaver Sample Database (right click on the connection name in the list on the left -> SQL Editor -> open SQL console). Copy paste the code to list the available tables and run it. Why does this give an SQL error?
</div class="question">
PSQL code does not work in SQLite 1 to 1 because it's a different language "within SQL."

<div class="question">
Exercise 5.10

Create the “konijn” and “rat” tables within the verfexperiment schema, but call them “rabbit” and “rat”. Create a third table as well, with whatever variables you like.
</div class="question">
```{sql}
#| eval: false
-- create verfexperiment schema
CREATE SCHEMA verfexperiment

-- create rabbit
CREATE TABLE verfexperiment.rabbit (
verfnummer int,
oorkleur char(50),
PRIMARY KEY (verfnummer)
);

-- create rat
CREATE TABLE verfexperiment.rat (
verf int,
staatkleur char(50),
FOREIGN KEY (verf) REFERENCES verfexperiment.rabbit (verfnummer));

-- create mouse
CREATE TABLE verfexperiment.mouse (
verf int,
vachtkleur char(50),
FOREIGN KEY (verf) REFERENCES verfexperiment.rabbit (verfnummer));
```

<div class="question">
Exercise 5.11

Here is the generic PostgeSQL code for changing the schema name:
```{sql}
#| eval: false
ALTER SCHEMA schema_name 
RENAME TO new_name;
```
Change schema “verfexperiment” to “paintexp”. After doing so, select the connection in the list on the left (postgres-localhost:5432) and press F5 to see the change.
</div class="question">
```{sql}
#| eval: false
ALTER SCHEMA verfexperiment
RENAME TO paintexp;
```

<div class="question">
Exercise 5.12

Add 2 more rows in both tables.
</div class="question">
```{sql}
#| eval: false
--- insert two new verfnummer rows into rabbit table within paintexp schema 
INSERT INTO paintexp.rabbit (verfnummer)
VALUES (4), (5);

--- update the new and empty verfnummer rows with colors
UPDATE paintexp.rabbit
SET oorkleur = CASE 
	WHEN verfnummer = 4 THEN 'red'
	WHEN verfnummer = 5 THEN 'blue'
END
WHERE verfnummer IN (4, 5);

--- insert new values in the verf value in rat table in paintexp schema
INSERT INTO paintexp.rat (verf)
VALUES (2), (3);
```

<div class="question">
Exercise 5.13

Verify with SQL what’s in the tables now, here is the generic SQL code:
```{sql}
#| eval: false
SELECT * FROM table;
```
</div class="question">

```{sql}
#| eval: false
SELECT * FROM paintexp.rabbit;
```
| verfnummer | oorkleur |
|--|--|
|1|red|
|2|blue|
|3|green|
|4|red|
|5|blue|
```{sql}
#| eval: false
SELECT * FROM paintexp.rat;
```
|verf|staatkleur|
|--|--|
|2|[NULL]|
|3|[NULL]|
|2|[NULL]|
|3|[NULL]|

<div class="question">
Exercise 5.14

Suppose you have a table with 50 rats and want to change a specific rat’s tail colour value? What would you need to be able to use the code from the example above?
</div class="question">
```{sql}
#| eval: false
UPDATE paintexp.rat
SET staartkleur = 'nieuwe kleur'
WHERE ratid = NUM;
```
A single specific rat would need an index in order to change its staartkleur

<div class="question">
Exercise 5.15

Add a column to the rabbit table named ‘rating’. You can leave it empty
</div class="question">
```{sql}
#| eval: false
ALTER TABLE paintexp.rabbit 
ADD rating int
```

<div class="question">
Exercise 5.16

Select only the customer_id column from the customer table.
</div class="question">
```{sql}
#| eval: false
SELECT 
	customer_id 
FROM
	public.customer
```

<div class="question">
Exercise 5.17

What did the previous query do?
</div class="question">
```{sql}
#| eval: false
SELECT
    title,
    release_year
FROM
    film
ORDER BY
    release_year DESC,
    title ASC;
```
<pre>
SELECTS
    title and release year columns
FROM 
    film table in the public schema
ORDERS 
    the columns by release year descending (from highest year to lowest), 
    then by title ascending (from A to Z).
</pre>

<div class="question">
Exercise 5.18

Find all the actors named ED, and have them returned to you in alphabetical order of their last name.
</div class="question">
```{sql}
#| eval: false
SELECT 
	first_name,
	last_name 
FROM 
	public.actor
WHERE 
	first_name='ED'
ORDER BY
	last_name ASC;
```
<div class="question">
Exercise 5.19

Find the actors with a first name starting with the letter B, sort them in alphabetical order and return their full name.
</div class="question">
```{sql}
#| eval: false
SELECT 
	first_name || ' ' || last_name AS full_name
FROM 
	public.actor 
WHERE 
	first_name  LIKE 'B%' 
ORDER BY
	full_name ASC
```

<div class="question">
- Which customers have a first name BETWEEN 5 and 7 characters long?
- What was the MAX amount payed for a rental?
- Find all actors not called ED.
- COUNT the number of films in the database.
- Find the last names of all actors and customers (UNION)
- Play with the SQL quiz if you like.
</div class="question">

```{sql}
#| eval: false
/*
Which customers have a first name BETWEEN 5 and 7 characters long?
*/
SELECT 
	first_name 
FROM 
	public.customer
WHERE 
	length(first_name)>5
AND 
	length(first_name)<7 ;
	
alternatively:

SELECT
  first_name
FROM
  public.customer
WHERE
  LENGTH(first_name) BETWEEN 5 AND 7;
/*
What was the MAX amount payed for a rental?
*/
SELECT 
	* 
FROM 
	public.payment
ORDER BY
	amount DESC
/*
Find all actors not called ED.
*/
SELECT 
	first_name, 
	last_name 
FROM 
	public.actor
WHERE 
	first_name != 'ED'
/*
COUNT the number of films in the database.
*/
SELECT 
  COUNT(DISTINCT film_id) 
FROM 
  public.film
/*
Find the last names of all actors and customers (UNION)
*/
SELECT 
	last_name 
FROM 
	public.customer
UNION
SELECT 
	last_name 
FROM 
	public.actor
/*
Play with the SQL quiz if you like.
*/
```
Result:
20 of 25

80%

Almost! Study a little more and take the test again!

Time Spent
5:54

<pre>
REMOVE to delete data from db
BETWEEN and INNER JOIN exist
CREATE TABLE name to create a "database table"
</pre>
<div class="question">
Exercise 5.20

What does “INNER JOIN address ON address.address_id = staff.address_id” mean? How are these attributes called? What is the underlying assumption with using these keys?
</div class="question">
```{sql}
#| eval: false
SELECT 
  first_name, 
  last_name,
  address.address AS street_address
FROM
  staff
INNER JOIN 
  address 
ON 
  address.address_id = staff.address_id
```
<pre>
SELECT names from the staff TABLE and
SELECT address from the address TABLE and call it street_address
INNER JOIN the address TABLE
ON the address.address_id FOREIGN KEY by the staff.address_id PRIMARY KEY
</pre>
<div class="question">
Exercise 5.21

Make a table containing only all the film titles and their category (Documentary, Horror etc..). Export this as .csv
</div class="question">
```{sql}
#| eval: false
SELECT 
	film.title, category.name
FROM 
	public.film
LEFT JOIN 
	film_category
	ON film_category.film_id = film.film_id 
LEFT JOIN 
    category 
	ON category.category_id = film_category.category_id 
```

```{r}
#| label: tbl-005_film_csv
#| tbl-cap: "Exported psql film.title and category.name"
#| layout-ncol: 2

film_csv <- read.csv(here::here("data_raw/data_0050/film_film_category_category_202411290752.csv"))

kable(head(film_csv))
```

<div class="question">
Exercise 5.22

Actually, we had better uploaded tidy data.. Remove the table again with

dbRemoveTable(con, "penguinswide")

Transform the penguins data to tidy data format (you actually already did this in the first part of this lesson) and upload it to the myfirstdb database.
</div class="question">
```{r}
#| eval: false
con <- dbConnect(RPostgres::Postgres(), 
                 dbname = "pagila", 
                 host="localhost", 
                 port="5432", 
                 user="postgres", 
                 password="") 

dbListFields(con, "actor")
actortbl <- tbl(con, "actor") %>% as_tibble()
saveRDS(actortbl, here::here("data/data_0050/actortbl.rds"))
```

```{r}
actortbl <- readRDS(here::here("data/data_0050/actortbl.rds"))
actortbl %>%
  select(actor_id, first_name, last_name) %>%
  filter(actor_id > 5 & actor_id < 12)
```

```{r}
#| eval: false
con <- dbConnect(RPostgres::Postgres(), 
                 dbname = "myfirstdb", # connect to myfirstdb
                 host="localhost", 
                 port="5432", 
                 user="postgres", 
                 password="") 

dbWriteTable(con, "penguinswide", penguins)
dbRemoveTable(con, "penguinswide")

dbWriteTable(con, "penguinstidy", penguins_tidy)
dbDisconnect(con)
```


